#!/usr/bin/env bash

die() {
	echo -e " ${NOCOLOR-\e[1;31m*\e[0m }${*}" >&2
	exit 1
}

einfo() {
	echo -e " ${NOCOLOR-\e[1;32m*\e[0m }${*}" >&2
}

ewarn() {
	echo -e " ${NOCOLOR-\e[1;33m*\e[0m }${*}" >&2
}

add_uefi_entries () (
	for efi_file in $partition_efis; do
		# Skip this kernel if ignore file is found
		if [[ -f "$efi_file.ignore" ]]; then
			ewarn "Ignoring \"$efi_file\" from partition \"$partition\"."
			continue
		fi

		# Prepare path which will be inserted into efibootmgr
		local efi_file_path
		efi_file_path="${efi_file//$partition_mount}"

		# Find first free hex address larger than or equal to 0100 for new UEFI boot entry
		local bootnum
		bootnum=256 # 256 is decimal value of 0100
		while [[ "$(efibootmgr -u)" == *"Boot$(printf %04X $bootnum)"* ]]; do
			bootnum=$((bootnum + 1))
			
			# Die if script exceeds managed range 0100-0200
			if [[ $bootnum -gt 512 ]]; then
				die "All IDs, within managed range by uefi-mkconfig, are full!"
			fi

		done
		
		# Convert chosen entry ID into hex
		bootnum="$(printf %04X $bootnum)"

		# Get kernel version
		## Remove everything before /
		local kernel_version
		kernel_version="${efi_file_path//*\//}"
		## Remove everything before first - to remove any prefixes
		kernel_version="${kernel_version/${kernel_version%%-*}-/}"
		## Remove .efi suffix if it exists
		if [[ "$kernel_version" == *".efi"* ]]; then
			kernel_version="${kernel_version/\.${kernel_version##*.}}"
		fi

		# Create label for UEFI eintry
		local partition_label
		local entry_label
		partition_label="$(lsblk "/dev/$partition" -lno PARTLABEL)"
		if [[ -n ${partition_label} ]]; then
			entry_label="$kernel_version on $partition_label"
		else
			entry_label="$kernel_version"
		fi

		if [[ -n $backup_efi ]]; then
			entry_label="UMCB $entry_label"
		else
			entry_label="UMC $entry_label"
		fi
			
		# Create path to initramfs
		local initramfs_image
		initramfs_image="${efi_file_path/${efi_file_path##*/}}initramfs-$kernel_version.img"
		## Add .old suffix to initramfs in case we are handling kernel with -old suffix
		[[ "$efi_file_path" == *"-old."* ]] && initramfs_image="${initramfs_image/-old}.old"

		# If shim is present in directory, presume it's used for every kernel in said directory
		local shim
		local adding_kernel_commands
		shim="$(find "$partition_mount""${efi_file_path/${efi_file_path##*/}/}" -maxdepth 1 -iname "*shim*.efi")"
		if [[ -n "$shim" ]]; then
			shim="${shim%%.efi*}.efi"
			adding_kernel_commands="${efi_file_path//\//\\} ${kernel_commands}"
			einfo "Creating UEFI entry \"$bootnum\" for \"$partition_mount$efi_file_path\" using shim \"$shim\" found on \"$partition\"..."
			efi_file_path="${efi_file_path/${efi_file_path##*/}/}${shim/*\//}"
		elif [[ -n $backup_efi ]]; then
			adding_kernel_commands="${kernel_commands}"
			einfo "Creating BACKUP UEFI entry \"0100\" for \"$partition_mount$efi_file_path\" found on \"$partition\"..."	
		else
			adding_kernel_commands="${kernel_commands}"
			einfo "Creating UEFI entry \"$bootnum\" for \"$partition_mount$efi_file_path\" found on \"$partition\"..."
		fi
			
		# Check if microcode image exists
		## microcode image can be ignored the same way as kernel image via .ignore suffix
		local microcode_path
		microcode_path="${efi_file_path/${efi_file_path##*/}}"
		if [[ -f "${partition_mount}${microcode_path}amd-uc.img" ]] && [[ ! -f "${partition_mount}${microcode_path}amd-uc.img.ignore" ]]; then
			adding_kernel_commands="${adding_kernel_commands} initrd=${microcode_path//\//\\}amd-uc.img"
		fi
		if [[ -f "${partition_mount}${microcode_path}intel-uc.img" ]] && [[ ! -f "${partition_mount}${microcode_path}intel-uc.img.ignore" ]]; then
			adding_kernel_commands="${adding_kernel_commands} initrd=${microcode_path//\//\\}intel-uc.img"
		fi

		# Check if corresponding initramfs exists
		if [[ -f "$partition_mount$initramfs_image" ]]; then
			adding_kernel_commands="${adding_kernel_commands} initrd=${initramfs_image//\//\\}"
		else
			ewarn "No initramfs found for \"$partition_mount$efi_file_path\"."
		fi

		# Add new entry
		if [[ -z $backup_efi ]]; then
			efibootmgr -q --create -b "$bootnum" --disk /dev/"$partition" --label "$entry_label" --loader "${efi_file_path//\//\\}"\
			-u "$adding_kernel_commands" || die "Failed to add UEFI entry for \"$efi_file_path\""
		else
			efibootmgr -q --create-only -b "0100" --disk /dev/"$partition" --label "$entry_label" --loader "${efi_file_path//\//\\}"\
			-u "$adding_kernel_commands" || die "Failed to add UEFI entry for \"$efi_file_path\""
		fi
	done
)

backup_entry () {
	backup_efi=

	# Check if backup entry exist at ID 200
	if [[ "" == "$(efibootmgr -u | grep "Boot0100")" ]]; then
		for efi_file in $partition_efis; do	
			# Check if file marking backup kernel image exists
			if [[ -f "${efi_file}.uefibackup" ]]; then 
				backup_efi="$efi_file"
			fi
		done

		# Create backup entry from the most recent kernel image with backup file mark
		if [[ -n $backup_efi ]]; then 
			partition_efis="$backup_efi"
			add_uefi_entries
			backup_efi=
		else
			ewarn "No backup kernel image designated!"
		fi
	else
		einfo "Backup UEFI entry found at 0100"
	fi
}

main () {
	efi_parttype="c12a7328-f81f-11d2-ba4b-00a0c93ec93b"
	mounted_efi_partitions=$(lsblk -lo NAME,MOUNTPOINTS,PARTTYPE | grep  "$efi_parttype" | grep "/" | cut -d' ' -f1 | sort -r)
	proc_kernel_commands=
	valid_kernel_commands=
	kernel_prefixes="vmlinuz vmlinux- kernel- bzImage zImage"
	
	einfo "Running uefi-mkconfig..."

	[[ ${EUID} -eq 0 ]] || die "Please run uefi-mkconfig as root!"

	[[ -n ${mounted_efi_partitions} ]] || die "No mounted efi partitions!"

	[[ -n "$(command -v efibootmgr)" ]] || die "efibootmgr dependency not found!" 

	# Load kernel commands from config files
	if [[ -n "${INSTALLKERNEL_CONF_ROOT}" ]]; then
		if [[ -f "${INSTALLKERNEL_CONF_ROOT}/uefi-mkconfig" ]]; then
			kernel_commands="$(tr -s "${IFS}" ' ' <"${KERNEL_INSTALL_CONF_ROOT}/uefi-mkconfig")"
		fi
	elif [[ -f /etc/default/uefi-mkconfig ]]; then
		kernel_commands="$(tr -s "${IFS}" ' ' </etc/default/uefi-mkconfig)"
		einfo "Using kernel commands from \"/etc/default/uefi-mkconfig\""
	elif [[ -f /etc/kernel/uefi-mkconfig ]]; then
		kernel_commands="$(tr -s "${IFS}" ' ' </etc/kernel/uefi-mkconfig)"
		einfo "Using kernel commands from \"/etc/kernel/uefi-mkconfig\""
	elif [[ -f /usr/lib/kernel/uefi-mkconfig ]]; then
		kernel_commands="$(tr -s "${IFS}" ' ' </usr/lib/kernel/uefi-mkconfig)"
		einfo "Using kernel commands from \"/usr/lib/kernel/uefi-mkconfig\""
	else
		kernel_commands="$(tr -s "${IFS}" '\n' </proc/cmdline | grep -ve '^BOOT_IMAGE=' -e '^initrd=' | tr '\n' ' ')"
		proc_kernel_commands=1
		ewarn "Warning, using kernel commands from \"/proc/cmdline\"!"
	fi

	# Get kernel prefix from os-release
	if [[ -f /etc/os-release ]]; then
		. /etc/os-release
		kernel_prefixes="${kernel_prefixes} ${ID}-"
	elif [[ -f /usr/lib/os-release ]]; then
		. /usr/lib/os-release
		kernel_prefixes="${kernel_prefixes} ${ID}-"
	fi

	# Get kernel prefix from entry-token
	if [[ -f /etc/kernel/entry-token ]]; then
		kernel_prefixes="${kernel_prefixes} $(head -n1 /etc/kernel/entry-token)-"
	elif [[ -f /usr/lib/kernel/entry-token ]]; then
		kernel_prefixes="${kernel_prefixes} $(head -n1 /usr/lib/kernel/entry-token)-"
	fi

	# Verify kernel commands
        for check_config in $kernel_commands; do

                # Strip initrd=* from config file
                [[ "$check_config" != *"initrd="* ]] && strip_kernel_commands="$strip_kernel_commands $check_config"
                # Verify if "root=" is present
                [[ "$check_config" == "root="* ]] && valid_kernel_commands=1

        done
	kernel_commands="$strip_kernel_commands"

        [[ -z $valid_kernel_commands ]] && ewarn "Warning, kernel command \"root=\" is missing from loaded configuration!"
		
	# Clear old entries for regeneration
	## 256..512 is because entry IDs are actually in hexadecimal format
	for entry_number in {256..512}; do
		# Wipe only boot entries with UMC stamp
		if [[ "$(efibootmgr -u | grep Boot$(printf %04X $entry_number))" == *"UMC "* ]]; then
			efibootmgr -q -B -b $(printf %04X $entry_number)
		fi
	done

	for partition in $mounted_efi_partitions; do
		
		# Find partition uuid
		partition_partuuid=$(lsblk "/dev/$partition" -lno PARTUUID)

		# Find where disk is mounted
		# Head at the end deals with cases where this partition is mounted in multiple places
		partition_mount=$(lsblk /dev/"$partition" -lno MOUNTPOINTS | head -n 1)

		# Find all .efi files on this partition and split them to old and new
		for prefix in $kernel_prefixes; do
			find_results_new="$(find "$partition_mount" -name "$prefix*.efi" ! -name "$prefix*-old.efi" -printf "%f\n")"
			find_results_old="$(find "$partition_mount" -name "$prefix*-old.efi" -printf "%f\n")"
			[[ -n "$find_results_new" ]] && kernel_images_new+="$find_results_new "
			[[ -n "$find_results_old" ]] && kernel_images_old+="$find_results_old "
		done

		# Sort kernel images
		kernel_images="$(sort -uV <<< "$kernel_images_old") $(sort -uV <<< "$kernel_images_new")"

		# Add path back to the kernel image
		for kernel_image in $kernel_images; do
        		partition_efis_main+="$(find "$partition_mount" -name "$kernel_image") "
		done
		
		# Create backup entry if it does not exist
		partition_efis=$partition_efis_main
		backup_entry
		
		# Add missiong efi entries for efi files that exist
		partition_efis=$partition_efis_main
		add_uefi_entries	

	done

	einfo "Done"

}

main
